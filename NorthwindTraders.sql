
-- Verifying field types and column names of each table --

DESCRIBE NorthwindTraders.categories;
DESCRIBE NorthwindTraders.customers;
DESCRIBE NorthwindTraders.employees;
DESCRIBE NorthwindTraders.order_details;
DESCRIBE NorthwindTraders.orders;
DESCRIBE NorthwindTraders.products;
DESCRIBE NorthwindTraders.shippers;

--
-- Verifying data integrity of each table -- 

SELECT * FROM NorthwindTraders.categories;
SELECT * FROM NorthwindTraders.customers;
SELECT * FROM NorthwindTraders.employees;
SELECT * FROM NorthwindTraders.order_details;
SELECT * FROM NorthwindTraders.orders;
SELECT * FROM NorthwindTraders.products;
SELECT * FROM NorthwindTraders.shippers;

--

SET SQL_SAFE_UPDATES = 0;
SET sql_mode = '';

-- Handling Missing Values -- 

-- Orders Table --
SELECT * FROM NorthwindTraders.orders 
WHERE shippedDate = "";

UPDATE NorthwindTraders.orders -- Setting missing values as NULL
SET shippedDate = NULL
WHERE shippedDate = "";

-- Employee Table --
SELECT * FROM NorthwindTraders.employees
WHERE reportsTo = "";

UPDATE NorthwindTraders.employees -- Setting missing values as NULL
SET reportsTo = NULL
WHERE reportsTo = "";

--
-- Changing Date Format in the Orders table --

ALTER TABLE NorthwindTraders.orders 
MODIFY orderDate VARCHAR(20); 

UPDATE NorthwindTraders.orders 
SET orderDate = DATE_FORMAT(STR_TO_DATE(orderDate, '%Y-%m-%d'), '%Y-%m-%d');

ALTER TABLE NorthwindTraders.orders 
MODIFY orderDate DATETIME;

--

ALTER TABLE NorthwindTraders.orders 
MODIFY requiredDate VARCHAR(20); 

UPDATE NorthwindTraders.orders 
SET requiredDate = DATE_FORMAT(STR_TO_DATE(requiredDate, '%Y-%m-%d'), '%Y-%m-%d');

ALTER TABLE NorthwindTraders.orders 
MODIFY requiredDate DATETIME;

-- 

ALTER TABLE NorthwindTraders.orders 
MODIFY shippedDate VARCHAR(20); 

UPDATE NorthwindTraders.orders 
SET shippedDate = DATE_FORMAT(STR_TO_DATE(shippedDate, '%Y-%m-%d'), '%Y-%m-%d')
WHERE shippedDate IS NOT NULL;

ALTER TABLE NorthwindTraders.orders 
MODIFY shippedDate DATETIME;

-- 
-- Changing column nomenclature in Products Table --

SELECT * FROM NorthwindTraders.products
WHERE discontinued = "1";

UPDATE NorthwindTraders.products
SET discontinued = "Yes"
WHERE discontinued = "1";

SELECT * FROM NorthwindTraders.products
WHERE discontinued = "0";

UPDATE NorthwindTraders.products
SET discontinued = "No"
WHERE discontinued = "0";

--
-- DATA EXPLORATION --

SELECT * FROM NorthwindTraders.order_details;

SELECT COUNT(orderID) FROM NorthwindTraders.orders; -- There are 830 unique orders 
SELECT COUNT(DISTINCT customerID) FROM orders; -- There are 89 unique customers 
SELECT COUNT(DISTINCT categoryID) FROM products; -- There are 8 unique categories

SELECT ROUND(SUM(unitPrice * quantity * (1 - discount)),2) AS TotalSales -- Total Sales generated
FROM order_details;

SELECT orderID, ROUND(SUM(unitPrice * quantity * (1 - discount)),2) AS orderSales  -- Total Sales generated per order 
FROM order_details
GROUP BY orderID
ORDER BY orderID; -- orderRevenue DESC

SELECT od.productID, p.productName, ROUND(SUM(od.unitPrice * od.quantity * (1 - od.discount)),2) AS productSales -- Total Sales generated per product 
FROM order_details as od
JOIN products as p
ON od.productID = p.productID 
GROUP BY p.productName
ORDER BY p.productName;

SELECT ca.categoryID, od.productID, od.quantity,od.orderID,
od.unitPrice * od.quantity * (1 - od.discount) AS productSales,
SUM(od.unitPrice * od.quantity * (1 - od.discount))  OVER (PARTITION BY ca.categoryID) AS categorySales -- Total Sales generated by category V1
FROM order_details as od
JOIN products AS p
ON od.productID = p.productID
JOIN categories as ca
ON p.categoryID = ca.categoryID 
ORDER BY ca.categoryID, od.productID;

SELECT ca.categoryID, ca.categoryName, ROUND(SUM(od.unitPrice * od.quantity * (1 - od.discount)),2) AS categorySales -- Total Sales generated by category V2
FROM order_details as od
JOIN products as p
ON od.productID = p.productID 
JOIN categories as ca
ON p.categoryID = ca.categoryID
GROUP BY ca.categoryID
ORDER BY ca.categoryID; -- categorySales DESC

SELECT o.customerID, o.orderID, od.orderID, od.productID, od.quantity, od.discount, -- Total Sales generated per customer V1
od.unitPrice * od.quantity * (1 - od.discount) AS orderSales,
SUM(od.unitPrice * od.quantity * (1 - od.discount)) OVER (PARTITION BY o.customerID) AS customerSales
FROM orders AS o
JOIN order_details AS od
ON  o.orderID = od.orderID 
ORDER BY o.customerID, o.orderID; -- customerSales DESC

SELECT o.customerID, SUM(od.unitPrice * od.quantity * (1 - od.discount)) AS customerSales -- Total Sales generated per customer V2
FROM orders AS o
JOIN order_details AS od
ON o.orderID = od.orderID 
GROUP BY o.customerID
ORDER BY o.customerID; -- customerSales DESC

SELECT cu.country, o.customerID, o.orderID, od.productID, od.quantity, od.discount, -- Total Sales generated by country V1
od.unitPrice * od.quantity * (1 - od.discount) AS orderSales,
SUM(od.unitPrice * od.quantity * (1 - od.discount)) OVER (PARTITION BY cu.country) AS countrySales
FROM order_details as od
JOIN orders as o
ON od.orderId = o.orderID 
JOIN customers as cu
ON cu.customerID = o.customerId
ORDER BY cu.country, o.orderID; --  countrySales DESC

SELECT cu.country, ROUND(SUM(od.unitPrice * od.quantity * (1 - od.discount)),2) AS countrySales -- Total Sales generated by country V2 
FROM order_details as od
JOIN orders as o
ON od.orderId = o.orderID 
JOIN customers as cu
ON cu.customerID = o.customerId
GROUP BY cu.country
ORDER BY cu.country; -- countrySales DESC

SELECT p.productID, p.productName, COUNT(DISTINCT orderID) AS ordersPerProduct -- Total number of orders per product 
FROM order_details as od
JOIN products as p
ON od.productID = p.productID
GROUP BY p.productID
ORDER BY p.productID; -- ordersPerProduct DESC

SELECT customerID, COUNT(DISTINCT orderID) as ordersPerCustomer -- Total number of orders per customer 
FROM orders
GROUP BY customerID
ORDER BY customerID; -- ordersPerCustomer DESC

SELECT ca.categoryID, ca.categoryName, COUNT(DISTINCT orderID) as ordersByCategory -- Total number of orders by category
FROM order_details as od
JOIN products as p
ON od.productID = p.productID
JOIN categories as ca
ON ca.categoryID = p.categoryID
GROUP BY p.categoryID
ORDER BY p.categoryID; -- ordersByCategory DESC

SELECT cu.country, COUNT(DISTINCT orderID) as ordersByCountry -- Total number of orders by country
FROM orders as o
JOIN customers as cu
ON o.customerID = cu.customerID
GROUP BY cu.country
ORDER BY cu.country; -- ordersByCountry DESC

SELECT e.employeeID, e.employeeName, e.Title, 
COUNT(DISTINCT o.orderID) as ordersPerEmployee, -- Total number of orders per employee
SUM(od.unitPrice * od.quantity * (1 - od.discount)) AS employeeRevenue -- Total Sales generated by employee 
FROM employees AS e
JOIN orders AS o
ON e.employeeID = o.employeeID 
JOIN order_details AS od 
ON o.orderID = od.orderID
GROUP BY e.employeeID
ORDER BY e.employeeID; -- employeeSalesDESC

SELECT s.shipperID, s.companyName, COUNT(DISTINCT orderID) as ordersShippedByShipper -- Total number of orders shipped by shipper 
FROM orders as o
JOIN shippers as s
ON s.shipperID = o.shipperID
GROUP BY s.shipperID
ORDER BY s.shipperID; 

SELECT od.shipperID, s.companyName,
ROUND(SUM(freight),2) AS totalFreightCost, -- Total freight cost by shipper
AVG(freight) as averageFreightCost   -- Average freight cost by shipper
FROM orders as od
JOIN shippers as s
ON od.shipperID = s.shipperID
GROUP BY shipperID
ORDER BY shipperID;

SELECT p.categoryID, ca.categoryName, 
ROUND(SUM(o.freight),2) AS totalFreightCost, -- Total freight cost by category
AVG(o.freight) as averageFreightCost -- Average freight cost by category
FROM order_details as od
JOIN products as p
ON od.productID = p.productID 
JOIN categories as ca
ON p.categoryID = ca.categoryID
JOIN orders as o 
ON o.orderID = od.orderID
GROUP BY p.categoryID
ORDER BY p.categoryID; 
